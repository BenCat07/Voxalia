#version 430 core

layout (binding = 0) uniform sampler2D godraytex;

layout (location = 6) uniform float exposure = 1.0;

layout (location = 0) in vec2 f_texcoord;

out vec4 color;

/*
// The vector spam below is generated with this simple distribution code, as opposed to anything sane, such as live-generating it:
            StringBuilder sb = new StringBuilder();
            int i = 1;
            int t = 0;
            for (float f = -0.3f; f < 0.3f; f += 0.04f)
            {
                for (float g = -0.3f; g < 0.3f; g += 0.04f)
                {
                    float a = f;
                    float b = g;
                    float c = (float)Math.Sqrt(a * a + b * b);
                    sb.Append("vec3(").Append(a).Append(", ").Append(b).Append(", ").Append(c).Append("),");
                    if (i++ >= 5)
                    {
                        sb.Append("\n");
                        i = 1;
                    }
                    else
                    {
                        sb.Append(" ");
                    }
                    t++;
                }
            }
            File.WriteAllText("test.txt", t + "\n" + sb.ToString());
*/

const int OFF_COUNT = 205;

const vec3[] offsets = vec3[](
vec3(0.04, 0, 0.04), vec3(0.02563987, 0.03070174, 0.04), vec3(-0.007129842, 0.03935944, 0.04), vec3(-0.03478029, 0.01975681, 0.04), vec3(-0.03745827, -0.01403133, 0.04),
vec3(-0.01324098, -0.03774489, 0.04), vec3(0.02048342, -0.03435738, 0.04), vec3(0.03950059, -0.006301057, 0.04), vec3(0.08, 0, 0.08), vec3(0.07246509, 0.0338941, 0.08),
vec3(0.05127975, 0.06140348, 0.08), vec3(0.0204347, 0.07734612, 0.08), vec3(-0.01425968, 0.07871888, 0.08), vec3(-0.04626793, 0.06526314, 0.08), vec3(-0.06956057, 0.03951362, 0.08),
vec3(-0.0797499, 0.006320817, 0.08), vec3(-0.07491653, -0.02806266, 0.08), vec3(-0.05597094, -0.05715989, 0.08), vec3(-0.02648195, -0.07548977, 0.08), vec3(0.00799551, -0.07959945, 0.08),
vec3(0.04096684, -0.06871476, 0.08), vec3(0.06622113, -0.04488609, 0.08), vec3(0.07900118, -0.01260211, 0.08), vec3(0.12, 0, 0.12), vec3(0.1149319, 0.03450587, 0.12),
vec3(0.1001557, 0.0660971, 0.12), vec3(0.07691962, 0.09210522, 0.12), vec3(0.04718623, 0.1103334, 0.12), vec3(0.01346711, 0.1192419, 0.12), vec3(-0.02138956, 0.1180783, 0.12),
vec3(-0.05443948, 0.1069408, 0.12), vec3(-0.08289101, 0.08677027, 0.12), vec3(-0.1043409, 0.05927039, 0.12), vec3(-0.1169773, 0.02676404, 0.12), vec3(-0.1197328, -0.008003013, 0.12),
vec3(-0.1123748, -0.04209407, 0.12), vec3(-0.09552462, -0.07262951, 0.12), vec3(-0.07060571, -0.09703006, 0.12), vec3(-0.03972287, -0.1132347, 0.12), vec3(-0.005484728, -0.1198746, 0.12),
vec3(0.0292167, -0.1163889, 0.12), vec3(0.06145026, -0.1030721, 0.12), vec3(0.08849324, -0.08104905, 0.12), vec3(0.1080614, -0.0521799, 0.12), vec3(0.1185018, -0.01890323, 0.12),
vec3(0.16, 0, 0.16), vec3(0.1561871, 0.03472153, 0.16), vec3(0.1449302, 0.0677882, 0.16), vec3(0.1267657, 0.09762401, 0.16), vec3(0.1025595, 0.122807, 0.16),
vec3(0.07346516, 0.1421368, 0.16), vec3(0.0408694, 0.1546922, 0.16), vec3(0.006325763, 0.1598749, 0.16), vec3(-0.02851937, 0.1574378, 0.16), vec3(-0.06200524, 0.1474969, 0.16),
vec3(-0.09253587, 0.1305263, 0.16), vec3(-0.1186561, 0.1073346, 0.16), vec3(-0.1391211, 0.07902724, 0.16), vec3(-0.1529555, 0.04695336, 0.16), vec3(-0.1594998, 0.01264163, 0.16),
vec3(-0.1584422, -0.02227261, 0.16), vec3(-0.1498331, -0.05612532, 0.16), vec3(-0.1340827, -0.08730303, 0.16), vec3(-0.1119419, -0.1143198, 0.16), vec3(-0.08446576, -0.135888, 0.16),
vec3(-0.05296391, -0.1509795, 0.16), vec3(-0.01893774, -0.1588753, 0.16), vec3(0.01599102, -0.1591989, 0.16), vec3(0.05015763, -0.1519349, 0.16), vec3(0.08193368, -0.1374295, 0.16),
vec3(0.1098047, -0.1163741, 0.16), vec3(0.1324423, -0.08977219, 0.16), vec3(0.1487675, -0.05889162, 0.16), vec3(0.1580024, -0.02520423, 0.16), vec3(0.2, 0, 0.2),
vec3(0.1969453, 0.03482163, 0.2), vec3(0.1878745, 0.06857956, 0.2), vec3(0.1730648, 0.1002426, 0.2), vec3(0.1529684, 0.1288435, 0.2), vec3(0.1281994, 0.1535087, 0.2),
vec3(0.09951419, 0.1734846, 0.2), vec3(0.06778916, 0.1881612, 0.2), vec3(0.03399341, 0.1970899, 0.2), vec3(-0.0008407416, 0.1999982, 0.2), vec3(-0.03564921, 0.1967972, 0.2),
vec3(-0.06936871, 0.1875846, 0.2), vec3(-0.1009692, 0.1726419, 0.2), vec3(-0.1294854, 0.1524255, 0.2), vec3(-0.1540462, 0.127553, 0.2), vec3(-0.1739014, 0.0987841, 0.2),
vec3(-0.1884444, 0.06699768, 0.2), vec3(-0.1972311, 0.03316469, 0.2), vec3(-0.1999929, -0.001681373, 0.2), vec3(-0.1966456, -0.03647608, 0.2), vec3(-0.1872914, -0.07015655, 0.2),
vec3(-0.172216, -0.101694, 0.2), vec3(-0.1518799, -0.1301249, 0.2), vec3(-0.1269043, -0.154581, 0.2), vec3(-0.09805219, -0.1743151, 0.2), vec3(-0.06620488, -0.1887244, 0.2),
vec3(-0.0323352, -0.1973688, 0.2), vec3(0.002522213, -0.1999841, 0.2), vec3(0.03730258, -0.1964905, 0.2), vec3(0.07094347, -0.1869947, 0.2), vec3(0.1024172, -0.1717868, 0.2),
vec3(0.1307625, -0.1513313, 0.2), vec3(0.1551133, -0.1262531, 0.2), vec3(0.1747259, -0.09731826, 0.2), vec3(0.1890012, -0.06541064, 0.2), vec3(0.197503, -0.03150491, 0.2),
vec3(0.24, 0, 0.24), vec3(0.2374524, 0.03487607, 0.24), vec3(0.2298638, 0.06901174, 0.24), vec3(0.2173953, 0.1016823, 0.24), vec3(0.2003115, 0.1321942, 0.24),
vec3(0.1789751, 0.1598996, 0.24), vec3(0.1538392, 0.1842104, 0.24), vec3(0.1254373, 0.2046105, 0.24), vec3(0.09437243, 0.2206668, 0.24), vec3(0.06130404, 0.2320384, 0.24),
vec3(0.02693419, 0.2384838, 0.24), vec3(-0.008007471, 0.2398664, 0.24), vec3(-0.04277913, 0.2361566, 0.24), vec3(-0.07664261, 0.2274333, 0.24), vec3(-0.108879, 0.2138817, 0.24),
vec3(-0.1388038, 0.1957894, 0.24), vec3(-0.165782, 0.1735406, 0.24), vec3(-0.1892406, 0.1476076, 0.24), vec3(-0.2086817, 0.1185409, 0.24), vec3(-0.2236926, 0.0869576, 0.24),
vec3(-0.2339545, 0.05352824, 0.24), vec3(-0.2392497, 0.01896251, 0.24), vec3(-0.2394657, -0.0160058, 0.24), vec3(-0.2345979, -0.05063431, 0.24), vec3(-0.2247496, -0.08418786, 0.24),
vec3(-0.21013, -0.1159541, 0.24), vec3(-0.1910494, -0.1452587, 0.24), vec3(-0.1679129, -0.1714796, 0.24), vec3(-0.1412117, -0.1940599, 0.24), vec3(-0.1115125, -0.2125205, 0.24),
vec3(-0.07944596, -0.2264693, 0.24), vec3(-0.04569279, -0.2356102, 0.24), vec3(-0.01096957, -0.2397491, 0.24), vec3(0.02398653, -0.2387983, 0.24), vec3(0.0584334, -0.2327779, 0.24),
vec3(0.09163974, -0.2218156, 0.24), vec3(0.1229006, -0.2061442, 0.24), vec3(0.1515523, -0.1860965, 0.24), vec3(0.1769866, -0.1620979, 0.24), vec3(0.1986635, -0.1346581, 0.24),
vec3(0.2161229, -0.1043595, 0.24), vec3(0.228994, -0.07184538, 0.24), vec3(0.2370036, -0.037806, 0.24), vec3(0.2399817, -0.002964017, 0.24), vec3(0.28, 0, 0.28),
vec3(0.2778153, 0.03490892, 0.28), vec3(0.2712955, 0.06927311, 0.28), vec3(0.2605421, 0.1025563, 0.28), vec3(0.2457231, 0.1342392, 0.28), vec3(0.2270696, 0.1638272, 0.28),
vec3(0.2048729, 0.1908588, 0.28), vec3(0.1794791, 0.2149122, 0.28), vec3(0.1512846, 0.2356119, 0.28), vec3(0.1207294, 0.2526349, 0.28), vec3(0.08829022, 0.2657157, 0.28),
vec3(0.05447332, 0.27465, 0.28), vec3(0.01980638, 0.2792986, 0.28), vec3(-0.01516963, 0.2795888, 0.28), vec3(-0.04990892, 0.275516, 0.28), vec3(-0.0838694, 0.267144, 0.28),
vec3(-0.1165212, 0.2546032, 0.28), vec3(-0.1473546, 0.2380895, 0.28), vec3(-0.1758887, 0.2178604, 0.28), vec3(-0.201678, 0.1942317, 0.28), vec3(-0.2243202, 0.1675721, 0.28),
vec3(-0.243462, 0.1382976, 0.28), vec3(-0.2588046, 0.106865, 0.28), vec3(-0.2701088, 0.07376481, 0.28), vec3(-0.2771979, 0.03951353, 0.28), vec3(-0.2799614, 0.004645662, 0.28),
vec3(-0.2783563, -0.0302947, 0.28), vec3(-0.2724075, -0.06476232, 0.28), vec3(-0.2622078, -0.09821935, 0.28), vec3(-0.2479165, -0.1301437, 0.28), vec3(-0.2297565, -0.1600372, 0.28),
vec3(-0.2080113, -0.1874334, 0.28), vec3(-0.1830201, -0.2119048, 0.28), vec3(-0.1551729, -0.2330694, 0.28), vec3(-0.1249044, -0.2505971, 0.28), vec3(-0.0926867, -0.2642142, 0.28),
vec3(-0.05902269, -0.2737084, 0.28), vec3(-0.02443765, -0.2789315, 0.28), vec3(0.01052873, -0.279802, 0.28), vec3(0.04533082, -0.2763062, 0.28), vec3(0.07942554, -0.2684987, 0.28),
vec3(0.1122808, -0.2565015, 0.28), vec3(0.143384, -0.2405016, 0.28), vec3(0.1722498, -0.2207487, 0.28), vec3(0.1984276, -0.1975512, 0.28), vec3(0.2215091, -0.1712709, 0.28),
vec3(0.2411339, -0.142318, 0.28), vec3(0.256996, -0.1111443, 0.28), vec3(0.2688477, -0.0782362, 0.28), vec3(0.2765041, -0.04410726, 0.28), vec3(0.2798458, -0.009290046, 0.28)
);

const float MAX_M = 1.0 / 0.28;

void main()
{
	vec4 grinp = vec4(0.0);
	for (int i = 0; i < OFF_COUNT; i++)
	{
		vec4 col = texture(godraytex, f_texcoord + offsets[i].xy * exposure);
		if (col.a > 0.0)
		{
			float mod = (1.0 - (offsets[i].z * MAX_M));
			grinp += col * mod;
		}
	}
	color = grinp;
	//color = vec4(texture(godraytex, f_texcoord).xyz, 1.0);
}
