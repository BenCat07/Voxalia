#version 430 core

layout(binding = 0, r32f) uniform readonly image2D texture_ids;

layout(shared, binding = 1) buffer voxels
{
	uvec4 posses[];
};
layout(shared, binding = 2) buffer b_indexmarkers
{
	uint f_indexmark[];
};

#if MODE_THREE
layout(shared, binding = 3) buffer b_thv
{
	vec4 f_thv[];
};
layout(shared, binding = 4) buffer b_thw
{
	vec4 f_thw[];
};
// TODO: Add set 2 of TH data
/*
layout(shared, binding = 5) buffer b_thv2
{
	vec4 f_thv2[];
};
layout(shared, binding = 6) buffer b_thw2
{
	vec4 f_thw2[];
};
*/
#else
#if MODE_TWO
layout(shared, binding = 3) buffer b_color
{
	vec4 f_color[];
};
layout(shared, binding = 4) buffer b_tcol
{
	vec4 f_tcol[];
};
layout(shared, binding = 5) buffer b_indices
{
	uint f_indices[];
};
layout(shared, binding = 6) buffer b_lightinfos
{
	uint f_lightinfos[];
};
#else // MODE_ONE
layout(shared, binding = 3) buffer b_position
{
	vec4 f_position[];
};
layout(shared, binding = 4) buffer b_normal
{
	vec4 f_normal[];
};
layout(shared, binding = 5) buffer b_texcoord
{
	vec4 f_texcoord[];
};
layout(shared, binding = 6) buffer b_tangent
{
	vec4 f_tangent[];
};
#endif
#endif

layout(shared, binding = 7) buffer b_shapes
{
	uint f_shapes[];
};

// TODO: block shape data buffer!

layout(local_size_x = MCM_VOX_COUNT, local_size_y = 1, local_size_z = MCM_VOX_COUNT) in;

#define CRUNCHABLE 1
#include vox_helper.inc

void main()
{
	uint start = f_indexmark[blockID(gl_GlobalInvocationID)];
	if (start != 0)
	{
		crunch_verts(gl_GlobalInvocationID, start - 1);
	}
}

#include glnoise.inc
