#version 430 core

layout(binding = 0, r32f) uniform readonly image2D texture_ids;

layout(std430, binding = 1) buffer b_indices
{
	uint f_indices[];
};
layout(std430, binding = 2) buffer b_position
{
	vec4 f_position[];
};
layout(std430, binding = 3) buffer b_normal
{
	vec4 f_normal[];
};
layout(std430, binding = 4) buffer b_texcoord
{
	vec4 f_texcoord[];
};
layout(std430, binding = 5) buffer b_tangent
{
	vec4 f_tangent[];
};
layout(std430, binding = 6) buffer b_color
{
	vec4 f_color[];
};
layout(std430, binding = 7) buffer tops_data
{
	ivec4 f_topsdat[];
};

layout(local_size_x = 179, local_size_y = 5, local_size_z = 1) in;

float tex_for(in uint mat)
{
	return imageLoad(texture_ids, ivec2(mat, 1)).x;
}

int mat_for(uvec2 coord)
{
	return f_topsdat[(coord.y * 180) + (coord.x)].x;
}

int height_for(uvec2 coord)
{
	return f_topsdat[(coord.y * 180) + (coord.x)].y;
}

#define TOPS_LAZY_PI 3.14159

void main()
{
	if (gl_GlobalInvocationID.y != 180)
	{
		int c_ind = int(((gl_GlobalInvocationID.y * 179) + (gl_GlobalInvocationID.x)) * 6);
		int c_mat = mat_for(gl_GlobalInvocationID.xy);
		float texter = tex_for(uint(c_mat));
		int c_hei = height_for(gl_GlobalInvocationID.xy);
		int xp_hei = height_for(gl_GlobalInvocationID.xy + ivec2(1, 0));
		int yp_hei = height_for(gl_GlobalInvocationID.xy + ivec2(0, 1));
		int pp_hei = height_for(gl_GlobalInvocationID.xy + ivec2(1, 1));
		int xp_mat = mat_for(gl_GlobalInvocationID.xy + ivec2(1, 0));
		int yp_mat = mat_for(gl_GlobalInvocationID.xy + ivec2(0, 1));
		int xm_mat = mat_for(gl_GlobalInvocationID.xy + ivec2(-1, 0));
		int ym_mat = mat_for(gl_GlobalInvocationID.xy + ivec2(0, -1));
		float texter_xp = tex_for(uint(xp_mat));
		float texter_xm = tex_for(uint(xm_mat));
		float texter_yp = tex_for(uint(yp_mat));
		float texter_ym = tex_for(uint(ym_mat));
		for (int i = 0; i < 6; i++)
		{
			f_indices[c_ind + i] = c_ind + i;
			f_color[c_ind + i] = vec4(1.0);
		}
		const int OFFSETTER = 16;
		const int OFFSETTER2 = 15;
		const int S_M = TOPS_WIDTH;
		/*
		// TODO S_M==75 -> #define + #if ?
		if (S_M == 75 && gl_GlobalInvocationID.x > (90 - OFFSETTER) && gl_GlobalInvocationID.x < (90 + OFFSETTER)
					   && gl_GlobalInvocationID.y > (90 - OFFSETTER) && gl_GlobalInvocationID.y < (90 + OFFSETTER))
		{
			if (gl_GlobalInvocationID.x > (90 - OFFSETTER2) || gl_GlobalInvocationID.y > (90 - OFFSETTER2))
			{
				c_hei -= 100;
			}
			if (gl_GlobalInvocationID.x < (90 + OFFSETTER2))
			{
				xp_hei -= 100;
			}
			if (gl_GlobalInvocationID.y < (90 + OFFSETTER2))
			{
				yp_hei -= 100;
			}
			if (gl_GlobalInvocationID.y < (90 + OFFSETTER2) && gl_GlobalInvocationID.x < (90 + OFFSETTER2))
			{
				pp_hei -= 100;
			}
		}
		*/
		// 0,0  :  1,0  :  1,1 - xp ym
		// 0,0  :  1,1  :  0,1 - xm yp
#if PATCH_EXTRA
		float multofactoro = 1.0;
		float posadd_x = 0.0;
		float posadd_y = 0.0;
		// NOTE: This section could maybe be made to expand middle instead of shrink edges?
		if (gl_GlobalInvocationID.x < 2)
		{
			float sinified = sin(float(gl_GlobalInvocationID.y) * (TOPS_LAZY_PI / 180.0)) * float(S_M);
			if (gl_GlobalInvocationID.x < 1)
			{
				multofactoro = 0.01;
				posadd_x = sinified * 2.0;
			}
			else
			{
				multofactoro = 0.4;
				posadd_x = sinified;
			}
		}
		if (gl_GlobalInvocationID.y < 2)
		{
			float sinified = sin(float(gl_GlobalInvocationID.x) * (TOPS_LAZY_PI / 180.0)) * float(S_M);
			if (gl_GlobalInvocationID.y < 1)
			{
				multofactoro = 0.01;
				posadd_y = sinified * 2.0;
			}
			else
			{
				multofactoro = 0.4;
				posadd_y = sinified;
			}
		}
		if (gl_GlobalInvocationID.x > 177)
		{
			float sinified = sin(float(gl_GlobalInvocationID.y) * (TOPS_LAZY_PI / 180.0)) * float(S_M);
			if (gl_GlobalInvocationID.x > 178)
			{
				multofactoro = 0.01;
				posadd_x = -sinified * 2.0;
			}
			else
			{
				multofactoro = 0.4;
				posadd_x = -sinified;
			}
		}
		if (gl_GlobalInvocationID.y > 177)
		{
			float sinified = sin(float(gl_GlobalInvocationID.x) * (TOPS_LAZY_PI / 180.0)) * float(S_M);
			if (gl_GlobalInvocationID.y > 178)
			{
				multofactoro = 0.01;
				posadd_y = -sinified * 2.0;
			}
			else
			{
				multofactoro = 0.4;
				posadd_y = -sinified;
			}
		}
		c_hei = int(float(c_hei) * multofactoro);
#else
		const float posadd_x = 0.0;
		const float posadd_y = 0.0;
#endif
		f_position[c_ind + 2] = vec4(gl_GlobalInvocationID.x * S_M + posadd_x, gl_GlobalInvocationID.y * S_M + posadd_y, float(c_hei), -texter_xp);
		f_position[c_ind + 1] = vec4(gl_GlobalInvocationID.x * S_M + S_M + posadd_x, gl_GlobalInvocationID.y * S_M + posadd_y, float(xp_hei), texter_xp);
		f_position[c_ind + 0] = vec4(gl_GlobalInvocationID.x * S_M + S_M + posadd_x, gl_GlobalInvocationID.y * S_M + S_M + posadd_y, float(pp_hei), texter_xp);
		f_position[c_ind + 5] = vec4(gl_GlobalInvocationID.x * S_M + posadd_x, gl_GlobalInvocationID.y * S_M + posadd_y, float(c_hei), -texter_xp);
		f_position[c_ind + 4] = vec4(gl_GlobalInvocationID.x * S_M + S_M + posadd_x, gl_GlobalInvocationID.y * S_M + S_M + posadd_y, float(pp_hei), texter_xp);
		f_position[c_ind + 3] = vec4(gl_GlobalInvocationID.x * S_M + posadd_x, gl_GlobalInvocationID.y * S_M + S_M + posadd_y, float(yp_hei), -texter_xp);
		vec3 norm_a = normalize(cross(vec3(1.0, 0.0, float(xp_hei - c_hei)), vec3(1.0, 1.0, float(pp_hei - c_hei))));
		f_normal[c_ind + 2] = vec4(-norm_a, -texter_yp);
		f_normal[c_ind + 1] = vec4(-norm_a, -texter_yp);
		f_normal[c_ind + 0] = vec4(-norm_a, texter_yp);
		vec3 norm_b = normalize(cross(vec3(1.0, 1.0, float(pp_hei - c_hei)), vec3(0.0, 1.0, float(yp_hei - c_hei))));
		f_normal[c_ind + 5] = vec4(-norm_b, -texter_yp);
		f_normal[c_ind + 4] = vec4(-norm_b, texter_yp);
		f_normal[c_ind + 3] = vec4(-norm_b, texter_yp);
		vec3 dv1_a = vec3(1.0, 0.0, float(xp_hei - c_hei));
		vec3 dv2_a = vec3(1.0, 1.0, float(pp_hei - c_hei));
		vec3 dt1_a = vec3(1.0, 0.0, 0.0);
		vec3 dt2_a = vec3(1.0, 1.0, 0.0);
		vec3 tng_a = normalize((dv1_a * dt2_a.y - dv2_a * dt1_a.y) / (dt1_a.x * dt2_a.y - dt1_a.y * dt2_a.x));
		f_tangent[c_ind + 2] = vec4(tng_a, texter_ym);
		f_tangent[c_ind + 1] = vec4(tng_a, texter_ym);
		f_tangent[c_ind + 0] = vec4(tng_a, -texter_ym);
		vec3 dv1_b = vec3(1.0, 1.0, float(pp_hei - c_hei));
		vec3 dv2_b = vec3(0.0, 1.0, float(yp_hei - c_hei));
		vec3 dt1_b = vec3(1.0, 1.0, 0.0);
		vec3 dt2_b = vec3(0.0, 1.0, 0.0);
		vec3 tng_b = normalize((dv1_b * dt2_b.y - dv2_b * dt1_b.y) / (dt1_b.x * dt2_b.y - dt1_b.y * dt2_b.x));
		f_tangent[c_ind + 5] = vec4(tng_b, texter_ym);
		f_tangent[c_ind + 4] = vec4(tng_b, -texter_ym);
		f_tangent[c_ind + 3] = vec4(tng_b, -texter_ym);
		const float tex_help = float(TOPS_WIDTH);
		f_texcoord[c_ind + 2] = vec4(0.0, 0.0, texter, texter_xm);
		f_texcoord[c_ind + 1] = vec4(tex_help, 0.0, texter, -texter_xm);
		f_texcoord[c_ind + 0] = vec4(tex_help, tex_help, texter, -texter_xm);
		f_texcoord[c_ind + 5] = vec4(0.0, 0.0, texter, texter_xm);
		f_texcoord[c_ind + 4] = vec4(tex_help, tex_help, texter, -texter_xm);
		f_texcoord[c_ind + 3] = vec4(0.0, tex_help, texter, texter_xm);
	}
}
